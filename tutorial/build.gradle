/**
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
**/

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "cz.malohlava:visteg:1.0.1"
    }
}

apply plugin: "cz.malohlava"



repositories {
    mavenCentral()
}

ant.importBuild 'build.legacy.xml'
ant.lifecycleLogLevel = "DEBUG"

dependencies {
}

task antGraph(dependsOn: 'grand') {
    description 'Generate Ant dependency graph'
}



task makeBuildXml {
    description "Generate build.xml for legacy builds"
}

makeBuildXml << {

    def writer = new FileWriter("build.xml")
    def xml = new groovy.xml.MarkupBuilder(writer)
    xml.project( basedir: ".",
                 default: "tar",
                 name: "pigtutorial") {


        property('name': 'gradle.executable', 'location': '../gradlew')

        macrodef('name':'gradlecall') {
            attribute('name':'target', default:'NOT-SET')
            sequential() {
                exec( 'executable': "\${gradle.executable}") {
                    arg('value': '@{target}')
                }
            }
        }

        tasks.each { task ->

            target('name': task.name, 'description' : task.description) {
                gradlecall('target': task.name)
            }

        }

    }
}

task tar(type:Tar, dependsOn: cp) {
    description "construct tutorial tar file"

    from(ant.properties['tar.dir'])
    baseName = "tutorial"
    compression =  Compression.GZIP
    extension = "tar.gz"

}

tar << {
    println "*** Creating tutorial.jar ***"
}


task clean {
    description "clean up tutorial build directory"
}

clean << {
    delete ant.properties['zip.file']
    delete 'build'

}

task init << {

    new File(ant.properties['ivy.dir']).mkdirs()
    new File(ant.properties['build.classes']).mkdirs()
    new File(ant.properties['tar.dir.final']).mkdirs()

}


